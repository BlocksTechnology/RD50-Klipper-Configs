
[gcode_macro _clean_nozzle_end]
gcode:
  TURN_OFF_HEATERS
  M104 T0 S0
  M104 T1 S0
  RESPOND TYPE=command MSG="action:prompt_end"
  RESPOND TYPE=command MSG="action_prompt_begin Extruders Cooling"
  RESPOND TYPE=command MSG="action:prompt_footer_button OK|RESPOND TYPE=command MSG=action:prompt_end|info"
  
  _calibrate_z_idex

[gcode_macro _clean_nozzle_start]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  RESPOND TYPE=command MSG="action:prompt_begin Clean the noozle"
  RESPOND TYPE=command MSG="action:prompt_text Extruders Heating. After reaching the temperature clean the nozzle and hit OK to proceed to z calibration."
  RESPOND TYPE=command MSG="action:prompt_footer_button OK|_clean_nozzle_end|info"
  RESPOND TYPE=command MSG="action:prompt_show"
  M104 T0 S170
  M104 T1 S170
  M109 T0 S180
  M109 T1 S180
  # Retract a little bit of filament 
  M83
  G1 E20 F{35 * 60}
  #Activate toolhead1 RETRACT A BIT ASWELLL
  ACTIVATE_EXTRUDER EXTRUDER=extruder1
  SET_DUAL_CARRIAGE CARRIAGE=1
  G1 E20 F{35 * 60}
  #ACTIVATE THE MAIN EXTRUDER AGAIN
  ACTIVATE_EXTRUDER EXTRUDER=extruder
  SET_DUAL_CARRIAGE CARRIAGE=0
  #Activate blowers for cooling 
  SET_FAN_SPEED FAN=blower_1 SPEED=1.0
  SET_FAN_SPEED FAN=blower_2 SPEED=1.0 
  G12
  
#Before the z_offset calibration we need clean the noozle and retract a little so it doesn't ooze
[gcode_macro _calibrate_z_idex]
gcode:
 # Speed
  RESPOND TYPE=command MSG="action:prompt_end"
  {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
  #{% set safe_x_disctance = printer["configfile"].config["dual_extruder"]%}
  {% set safe_x_distance = printer.configfile.settings.dual_carriage.safe_distance%}
  { action_respond_info("safe_x_distanca %d " % (safe_x_distance)) }
    
  #Find x and y center points toolhead0
  #{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
  #{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
  {% set zSafeHomeConfig = printer["configfile"].config["safe_z_home"] %}
  {% set x_center_toolhead0 = zSafeHomeConfig.home_xy_position.split(",")[0]|float %}
  {% set y_center_toolhead0 = zSafeHomeConfig.home_xy_position.split(",")[1]|float %}
  #Find the x and y center points toolhead1
  #{% set x_center_toolhead1 = x_center_toolhead0 + 38 | float %}
  {% set x_center_toolhead1 = x_center_toolhead0 + safe_x_distance | float %}
  #{% set y_center_toolhead1 = y_center_toolhead0 + 40 | float %}
  {% set y_center_toolhead1 = y_center_toolhead0 | float %}
  {action_respond_info("SAFE ZZ HOME ->  %s "%(x_center_toolhead1))}
  {action_respond_info("SAFE ZZ HOME ->  %s "%(y_center_toolhead1))}
  #Place toolhead 0 at center of the bed 
 # G0 X{x_center_toolhead0 - 20} Y{y_center_toolhead0 - 20} F{speed * 60}
  G0 X{x_center_toolhead0} Y{y_center_toolhead0} F{speed * 60}
  #Activate toolhead1
  ACTIVATE_EXTRUDER EXTRUDER=extruder1
  SET_DUAL_CARRIAGE CARRIAGE=1
  #G0 X{x_center_toolhead1} Y{y_center_toolhead1} F{speed * 10}
  G0 X{x_center_toolhead1}  F{speed * 20}
  ACTIVATE_EXTRUDER EXTRUDER=extruder
  SET_DUAL_CARRIAGE CARRIAGE=0
  PROBE_CALIBRATE
  # Check if i want to do the automatic probe calibrate or i want the manual probe calibrate
  #SAVE_CONFIG

[gcode_macro telll]
gcode:
  #{% set safe_x_disctance = printer["configfile"].config["safe_distance"]%}
  {% set safe_x_distance = printer.configfile.settings.dual_carriage.safe_distance %}
  { action_respond_info("safe_x_distanca %d " % (safe_x_distance)) }
  
[gcode_macro CALIBRATE_Z_IDEX]
description: 
  On the IDEX system calculate the z_offset of both heads, 
  places both heads at the center of the bed and then goes into the 
  PROBE_CABLIBRATE routine.
  The user need to move the second head up and down to get the z_offset calibration.
variable_toolhead_0_x:0
variable_toolhead_0_y:0
variable_toolhead_0_z_offset:0
gcode:
  {action_respond_info("CALIBRATE_Z_IDEX -> last_z_offset: %d "%(printer.probe.last_z_result))}
  #Check if Axis are homed 
  {% if 'XYZ' not in printer.toolhead.homed_axes|upper %}
    #CUSTOM_G28      Later try and implement lazy loading
    RESPOND TYPE=error MSG="Must home axes first -> Trying homing"
    {action_raise_error("Must home axes first! -> Trying homing")}
  {% endif %}
  #  CLEAN_NOZZLE_ROUTINE
  #Check if the nozzle is clean or not
  RESPOND TYPE=command MSG="action:prompt_begin NoozleClean"
  RESPOND TYPE=command MSG="action:prompt_text Is the noozle Clean?"
  RESPOND TYPE=command MSG="action:prompt_footer_button Yes|_calibrate_z_idex|info"
  RESPOND TYPE=command MSG="action:prompt_footer_button No|_clean_nozzle_start|error"
  RESPOND TYPE=command MSG="action:prompt_show"
###########################################################################################################################
###########################################################################################################################
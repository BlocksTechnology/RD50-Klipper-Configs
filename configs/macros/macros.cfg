[gcode_macro _list_Variables]
gcode:
  {% set psv = printer.save_variables.variables %}
  M118 current extruder: {psv.current_extruder}
  M118 Filament is loaded: {psv.filament_loaded}
  M118 Filament is: {psv.filament_type_loaded}
  M118 Filament temperature is: {psv.filament_temp}
  M118 Bed temperature is: {psv.bed_temp}
  {% set var = 2 %}
  M118 feeder_{var} 

[gcode_macro START_PRINT]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set current_extruder = psv.current_extruder %}
  {% set nozzle_diameter = params.NOZZLE_SIZE|float %}
  
  {% if nozzle_diameter != psv.printcore_diameter_1 and psv.current_extruder == 1 or nozzle_diameter != psv.printcore_diameter_2 and psv.current_extruder == 2 %}
    RESPOND TYPE=command MSG="action:prompt_begin Nozzle Diameters don't match"
    RESPOND TYPE=command MSG="action:prompt_text Slice the print for the correct nozzle diameter or change print core."
    RESPOND TYPE=command MSG="action:prompt_footer_button OK|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
    CANCEL_PRINT
  {% endif %}

########################################## Stop target temp from being too high ###########################################

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
  {% set psv = printer.save_variables.variables %}
  {% if rawparams %}
    {% set target_temp = rawparams.split('=')[2] %}
    {% set target_heater = rawparams.split('=')[1].split(' ')[0] %}
    
    {% if target_heater == 'extruder' %}
      {% if psv.printcore_type_1 == 'Standard_Temperature' %}
        {% set target_temp = [275, target_temp | int] | min %}
      {% elif psv.printcore_type_1 == 'High_Temperature' %}
        {% set target_temp = [400, target_temp | int] | min %}
      {% else %}
        {% set target_temp = [0, target_temp | int] | min %}
      {% endif %}
    {% endif %}

    {% if target_heater == 'extruder1' %}
      {% if psv.printcore_type_2 == 'Standard_Temperature' %}
        {% set target_temp = [275, target_temp | int] | min %}
      {% elif psv.printcore_type_2 == 'High_Temperature' %}
        {% set target_temp = [400, target_temp | int] | min %}
      {% else %}
        {% set target_temp = [0, target_temp | int] | min %}
      {% endif %}
    {% endif %}

    _SET_HEATER_TEMPERATURE HEATER={target_heater} TARGET={target_temp}
  {% else %}
    _SET_HEATER_TEMPERATURE
  {% endif %}

################################################# List registeres macros ##################################################
[gcode_macro list_macros]
description: Lists registered macros (and optionally show variable state).
  Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros: {}
gcode:
  # Load the config state once and save it.
  {% if not macros %}
    {% set renames = {} %}
    {% for k in printer.configfile.config %}
      {% if k.lower().startswith("gcode_macro") and
            printer.configfile.config[k].rename_existing %}
          {% set name = k.split(None, 1)[1] | lower %}
          {% set dummy = renames.__setitem__(name,
                          [printer.configfile.config[k].rename_existing|lower] +
                            renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
    {% for k in printer %}
      {% if k.lower().startswith("gcode_macro") %}
        {% set name = k.split(None, 1)[1] | lower %}
        {% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% if params.SILENT|default(0)|int == 0 %}
    _LIST_MACROS_DISPLAY {rawparams}
  {% endif %}
  
[gcode_macro _list_macros_display]
gcode:
  {% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
  {% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}

  {% set macros = printer["gcode_macro list_macros"].macros %}
  {% set output = [] %}
  {% for k in macros %}
    {% if SEARCH in k | lower %}
      {% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]
                          else "") %}
      {% set outvars = [] %}
      {% if VARS %}
        {% for v in printer["gcode_macro " ~ k] | sort %}
          {% set dummy = outvars.append("\n* %s: %s" %
                           (v, printer["gcode_macro " ~ k][v]|string)) %}
        {% endfor %}
      {% endif %}
      {% set dummy = output.append(line + outvars | join("")) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output | sort | join("\n")) }
###########################################################################################################################
###########################################################################################################################
###########################################################################################################################

[gcode_macro BED_MESH_CALIBRATE]
#[gcode_macro G29]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}



[gcode_macro G29]
gcode:
    BED_MESH_CALIBRATE




#######################################################################################

[gcode_macro HOME_IF_NEEDED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
#######################################################################################

[gcode_macro PRIME_EXTRUDER]
# Do nozzle priming
gcode:
    M117 Priming
    G92 E0
    G1 X0.6 Y10 F18000
    G1 Z1.0 F600
    G1 X0.6 Y200 Z0.16 F2400.0 E20; Draw the first line
    G1 X1.0 Y200 Z0.16 F4800.0; Move to the side a little
    G1 X1.0 Y10.0 Z0.16 F2400.0 E40; Draw the second line
    G92 E0 
    G1 F2400 E-0.7 # Small retract to remove pressure
    G1 Z2.0 F600 ;Move Z Axis up

#######################################################################################

[gcode_macro PRINT_START]
description: Machine Print start macro.
variable_bed_temperature:0  
variable_extruder_temperature:0
#variable_material_type: "XXX"
gcode:
    {% set BED = params.BED| default(60) |int %}
    {% set EXTRUDER = params.EXTRUDER| default(190) | int %}

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed_temperature VALUE={BED}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder_temperature VALUE={EXTRUDER}
    
    CLEAR_PAUSE
    
    RESPOND MSG="Starting print...."
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}    ; set bed temp
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=190       ; set nozzle temp for any filament
    {action_respond_info("Heating extruder to 190ºC")}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=190         
    RESPOND MSG="Homing..."
    G21          ; set to mm
    M220 S100	 ; set print speed to 100%
    M221 S100	 ; set flow rate to 100%
    M107         ; disable fans
    G90          ; absolute positioning
    HOME_IF_NEEDED
    RESPOND MSG="Leveling gantry..."
    #QUAD_GANTRY_LEVEL
    Z_TILT_ADJUST
    {action_respond_info("Heating bed to %dºC" % (BED))}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}    ; wait for bed temp         
    RESPOND MSG="Building mesh."
    BED_MESH_CALIBRATE
    {action_respond_info("Heating extruder to %dºC" % (EXTRUDER))}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER} ; wait for extruder temp
    #SET_FILAMENT_SENSOR SENSOR=ToolHeadFilamentSensor ENABLE=1
    #SET_FILAMENT_SENSOR SENSOR=Spool_filament_sensor ENABLE=1
    
    M117 Purge Line
    RESPOND MSG="Purge Line"
    M83                                                 ; extruder to relative mode
    G92 E0                                              ; Reset extruder
    PRIME_EXTRUDER
    G92 E0
    M400		                                ; clear buffer
    M117 Printing
    RESPOND MSG="Printing."
#######################################################################################
      
[gcode_macro CANCEL_PRINT]
description: Cancel a running print job. 
rename_existing: BASE_CANCEL_PRINT
gcode: 
  {% set park_x = printer.toolhead.axis_minimum.x |default(100)|int %}
  {% set park_y = printer.toolhead.axis_minimum.y + 1|default(0)|int %}
  {% set current_print_z = printer.gcode_move.position.z|float %}
  # Raise z axis so to not hit the printed piece.
  # And Get how much we can raise the z axis without hitting the z maximum

  {% if ((current_print_z + 15) <= (printer.toolhead.axis_maximum.z )) %}
    {action_respond_info("Raising z height by 15")}
    G91
    G1 Z15 F900
  {% else %}
    G91
    G1 Z{printer.toolhead.axis_maximum.z - current_print_z} F900
    {action_respond_info("Raising z height by %d"%(printer.toolhead.axis.maximum.z - current_print_z))}
  {% endif %}
  # Move the toolhead to the defined park positions 
  G90
  G1 X{park_x} Y{park_y} F12000
  # If a cancel is made after a pause print, we need to clear the pause.
  CLEAR_PAUSE
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
  SDCARD_RESET_FILE
  SET_FILAMENT_SENSOR SENSOR=ToolHeadFilamentSensor ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=Spool_filament_sensor ENABLE=0
  BASE_CANCEL_PRINT
  DISABLE_ALL 
  M104 S0 
  M140 S0
###########################################################################################################################
###########################################################################################################################
###########################################################################################################################


[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
    
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

###########################################################################################################################

###########################################################################################################################

; This is here so M118 sends text to console without prefixes by jet8300 https://www.reddit.com/r/klippers/comments/y8rara/what_command_prints_text_to_the_console_id_like/
[respond]
default_type: echo
default_prefix: 

###########################################################################################################################
#
#  LOADING FILAMENT - Experimental with Menus. There may be an option for choosing between T0 and T1
#
###########################################################################################################################

[delayed_gcode PULL_FILAMENT]
#Initial_duration:
#description: After actuators have been closed, keep pulling fillament with the feeders until the flow sensors detect it.
gcode: 
  {% set psv = printer.save_variables.variables %}
  {% set motion_state = printer["filament_motion_sensor flow_Sensor_" + psv.current_extruder|string ].filament_detected %}
  M118 Filament flow is: {motion_state}
  {% if not motion_state %}
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} ENABLE=1 SET_POSITION=0
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} MOVE=20 SPEED=20
    UPDATE_DELAYED_GCODE ID=PULL_FILAMENT DURATION=2
  {% else %} 
    M118 Filament Detected
    UPDATE_DELAYED_GCODE ID=PULL_FILAMENT DURATION=0
    # Finish loading until purging
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} ENABLE=1 SET_POSITION=0
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} MOVE=100 SPEED=5 SYNC=0 #10 mm/s
    M83
    G1 E100 F300  #600 mm/min, 10mm/s
    G90
    # Saving the filament settings in the global variables.
    SAVE_VARIABLE VARIABLE=filament_temp_{psv.current_extruder} VALUE={ printer['gcode_macro _load_Filament'].filament_temp }
    SAVE_VARIABLE VARIABLE=bed_temp_{psv.current_extruder} VALUE={ printer['gcode_macro _load_Filament'].bed_temp }
    SAVE_VARIABLE VARIABLE=filament_type_loaded_{psv.current_extruder} VALUE="'{printer['gcode_macro _load_Filament'].loading_filament}'" 
    SAVE_VARIABLE VARIABLE=filament_loaded_{psv.current_extruder} VALUE=True
    # Turning off the actuator.
    SET_PIN PIN=enable_feeder_{psv.current_extruder} VALUE=0.0 
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} ENABLE=0 SET_POSITION=0 
    # Turning Off heater
    M104 S0
  {% endif %}

[delayed_gcode PULL_LOOP]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set position = printer['gcode_macro _load_Filament'].position %}
  {% if position < 1300 %}
    SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=position VALUE={position + 35|int}
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} MOVE={position} SPEED=35 
    UPDATE_DELAYED_GCODE ID=PULL_LOOP DURATION=1
  {% else %}
    UPDATE_DELAYED_GCODE ID=PULL_LOOP DURATION=0
    UPDATE_DELAYED_GCODE ID=PULL_FILAMENT DURATION=3
   {% endif %} 

[gcode_macro _load_Filament]
variable_filament_temp : 0
variable_bed_temp : 0
variable_loading_filament : 'None'
variable_position : 0
gcode:
  {% set psv = printer.save_variables.variables %}
  M104 S{filament_temp}
  {% if 'X' not in printer.toolhead.homed_axes|upper %} #upper as in upper case.
	#Home X Axis for loading if not homed.
    G28 X		
  {% endif %}
  M109 S{filament_temp}
  M83
  G1 E30 F500
  G90
  # Turning on the actuator.
  SET_PIN PIN=enable_feeder_{psv.current_extruder} VALUE=1.0 
  #M118 Pulling Filament past the feeders
  MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} ENABLE=1 SET_POSITION=0
  UPDATE_DELAYED_GCODE ID=PULL_LOOP DURATION=3

[gcode_macro load_Custom]
gcode:
    {% set FILAMENT_TEMP = params.Filament_Temperature|default(210)|int %} ; Set temperature of custom filament
    {% set BED_TEMP = params.Bed_Temperature|default(50)|int %} ; Set temperature of bed for custom filament
    SET_GCODE_VARIABLE MACRO=SET_MATERIAL VARIABLE=filament VALUE=params.'"{Custom}"' ; Save the material type to a variable just because

[gcode_macro load_PLA_Tool_1]
gcode:
  T0
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=filament_temp VALUE={210|int} # Setting the loading filament temperature to 210ºC
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=bed_temp VALUE={50|int} # Setting the bed temperature for the loaded filament to 50ºC
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=loading_filament VALUE='"PLA"' # Setting the Loading filament type
  _LOAD_FILAMENT

[gcode_macro load_PETG_Tool_1]
gcode:
  T0
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=filament_temp VALUE={245|int} # Setting the loading filament temperature to 210ºC
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=bed_temp VALUE={80|int} # Setting the bed temperature for the loaded filament to 50ºC
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=loading_filament VALUE='"PETG"' # Setting the Loading filament type
  _LOAD_FILAMENT

[gcode_macro load_PLA_Tool_2]
gcode:
  T1
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=filament_temp VALUE={210|int} # Setting the loading filament temperature to 210ºC
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=bed_temp VALUE={50|int} # Setting the bed temperature for the loaded filament to 50ºC
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=loading_filament VALUE='"PLA"' # Setting the Loading filament type
  _LOAD_FILAMENT

[gcode_macro load_PETG_Tool_2]
gcode:
  T1
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=filament_temp VALUE={245|int} # Setting the loading filament temperature to 210ºC
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=bed_temp VALUE={80|int} # Setting the bed temperature for the loaded filament to 50ºC
  SET_GCODE_VARIABLE MACRO=_load_Filament VARIABLE=loading_filament VALUE='"PETG"' # Setting the Loading filament type
  _LOAD_FILAMENT

###########################################################################################################################
#
#  UNLOADING FILAMENT - There may be an option for choosing between T0 and T1
#
###########################################################################################################################

[delayed_gcode PUSH_LOOP]
gcode: 
  {% set psv = printer.save_variables.variables %}
  {% set position = printer['gcode_macro unload_Filament'].position %}
  {% if position > 0 %}
    SET_GCODE_VARIABLE MACRO=unload_Filament VARIABLE=position VALUE={position - 35|int}
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} MOVE={position} SPEED=35 
    UPDATE_DELAYED_GCODE ID=PUSH_LOOP DURATION=1
  {% else %}
    UPDATE_DELAYED_GCODE ID=PUSH_LOOP DURATION=0
    M118 Filament unloaded.
    # Removing old loaded filament settings
    SAVE_VARIABLE VARIABLE=filament_temp_{psv.current_extruder} VALUE={ 0|int }
    SAVE_VARIABLE VARIABLE=bed_temp_{psv.current_extruder} VALUE={ 0|int }
    SAVE_VARIABLE VARIABLE=filament_type_loaded_{psv.current_extruder} VALUE="'None'" 
    SAVE_VARIABLE VARIABLE=filament_loaded_{psv.current_extruder} VALUE=False
    # Turning off the actuator.
    SET_PIN PIN=enable_feeder_{psv.current_extruder} VALUE=0.0 
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} ENABLE=0 SET_POSITION=0 
    # Turning Off heater
    M104 S0
   {% endif %} 

[delayed_gcode is_loaded]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set motion_state = printer["filament_motion_sensor flow_Sensor_" + psv.current_extruder|string ].filament_detected %}
  M118 Filament flow is: {motion_state}
  {% if motion_state %}
    SET_PIN PIN=enable_feeder_{psv.current_extruder} VALUE=1.0 
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} ENABLE=1 SET_POSITION=100
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} MOVE=0 SPEED=10 SYNC=0 #10 mm/s
    M83
    G1 E-100 F600
    G90
    UPDATE_DELAYED_GCODE ID=PUSH_LOOP DURATION=10
    MANUAL_STEPPER STEPPER=feeder_{psv.current_extruder} ENABLE=1 SET_POSITION=1400
  {% else %}
    M118 No filament loaded.
  {% endif %}

[gcode_macro unload_Filament]
variable_position : 1400
gcode:
  {% set psv = printer.save_variables.variables %}
  {% if psv.current_extruder == 1 %}
    {% if psv.filament_temp_1 > 190 %}
      {% set unload_temp = psv.filament_temp_1 %}
    {% else %}
      {% set unload_temp = 210 %}
    {% endif %}
  {% else %}
    {% if psv.filament_temp_2 > 190 %}
      {% set unload_temp = psv.filament_temp_2 %}
    {% else %}
      {% set unload_temp = 210 %}
    {% endif %}
  {% endif %}
  
  M104 S{unload_temp}
  {% if 'X' not in printer.toolhead.homed_axes|upper %} #upper as in upper case.
    #Home X Axis for loading if not homed.
    G28 X		
  {% endif %}
  M109 S{unload_temp}
  M83
  G1 E30 F600
  G90
  UPDATE_DELAYED_GCODE ID=is_loaded DURATION=4

[gcode_macro Unload_Filament_Tool_1]
gcode:
  T0
  unload_Filament

[gcode_macro Unload_Filament_Tool_2]
gcode:
  T1
  unload_Filament

###########################################################################################################################
#
#  Switching print cores
#
###########################################################################################################################

[delayed_gcode _wait_for_printcore_insert]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set print_core_adc = printer["temperature_sensor print_Core_" + psv.current_extruder|string ].temperature | float %}
  {% if print_core_adc >= 4000 %}
    UPDATE_DELAYED_GCODE ID=_wait_for_printcore_insert duration=1
  {% else %}
    UPDATE_DELAYED_GCODE ID=_wait_for_printcore_removal duration=1
  {% endif %}

[delayed_gcode _wait_for_printcore_removal]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set print_core_adc = printer["temperature_sensor print_Core_" + psv.current_extruder|string ].temperature | float %}
  {% if print_core_adc >= 4000 %}
    UPDATE_DELAYED_GCODE ID=_wait_for_printcore_insert duration=1
  {% else %}
    UPDATE_DELAYED_GCODE ID=_wait_for_printcore_removal duration=1
  {% endif %}

[gcode_macro _switch_Print_Core]
variable_loaded: False
gcode:
  {% if 'X' not in printer.toolhead.homed_axes|upper %} #upper as in upper case.
	#Home X Axis for loading if not homed.
    G28 X		
  {% endif %}
  {% set psv = printer.save_variables.variables %}
  # Check if the current extruder is loaded. If it is, heat it, retract wait for cooling, and ask to insert a new print core.
  {% if psv.filament_loaded_1 and psv.current_extruder == 1 or psv.filament_loaded_2 and psv.current_extruder == 2%}
    RESPOND TYPE=command MSG="action:prompt_begin There is Filament Loaded"
    RESPOND TYPE=command MSG="action:prompt_text Hotend is heating to unload it."
    RESPOND TYPE=command MSG="action:prompt_footer_button OK|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
    {% set loaded = True %}
    {% if psv.current_extruder == 1 %}
      _SET_HEATER_TEMPERATURE HEATER=extruder TARGET={psv.filament_temp_1}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={psv.filament_temp_1}
    {% elif psv.current_extruder == 2 %}
      _SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={psv.filament_temp_2}
      TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={psv.filament_temp_2}
    {% endif %}
    M83
    G1 E-70 F600
    G90
    RESPOND TYPE=command MSG="action:prompt_begin Hotend Cooling"
    RESPOND TYPE=command MSG="action:prompt_text Wait for Hotend to cool to remove print core"
    RESPOND TYPE=command MSG="action:prompt_footer_button OK|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
    {% if psv.current_extruder == 1 %}
      _SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
      TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=50
    {% elif psv.current_extruder == 2 %}
      _SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0
      TEMPERATURE_WAIT SENSOR=extruder1 MAXIMUM=50
    {% endif %}    
  {% endif %}  
  RESPOND TYPE=command MSG="action:prompt_begin Switch Print Core"
  RESPOND TYPE=command MSG="action:prompt_text Remove the print core and insert a new one."
  RESPOND TYPE=command MSG="action:prompt_footer_button OK|RESPOND TYPE=command MSG=action:prompt_end|info"
  RESPOND TYPE=command MSG="action:prompt_show"
  UPDATE_DELAYED_GCODE ID=_wait_for_printcore_removal duration=1

[gcode_macro Switch_Print_Core_1]
gcode:
  T0
  _switch_Print_Core

[gcode_macro Switch_Print_Core_2]
gcode:
  T1
  _switch_Print_Core
  
###########################################################################################################################

# Syntax Helpers:

# SET_GCODE_VARIABLE MACRO=TEST VARIABLE=v VALUE='"value"'                  Just to remember command syntax
# SET_GCODE_VARIABLE macro=MESSAGE variable=last_message value='"{msg}"'    Just to remember command syntax
